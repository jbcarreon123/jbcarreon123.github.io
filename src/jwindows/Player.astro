---
import { loadMusic } from "../assets/loadMusic";
import { fromPath } from '@catamphetamine/id3js/node';

const music = await loadMusic();

function r(str: any) {
    return str.replace(/[^a-zA-Z0-9\s\-_.,!?;:'"\/\\()\[\]{}<>]/g, '').trim();
}
---

<script is:inline>
    document.addEventListener("DOMContentLoaded", loadPlayer);
    document.addEventListener("astro:after-swap", loadPlayer);

    function toHHMMSS(str) {
        var sec_num = parseInt(str, 10); // don't forget the second param
        var hours   = Math.floor(sec_num / 3600);
        var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
        var seconds = sec_num - (hours * 3600) - (minutes * 60);

        if (hours   < 10) {hours   = hours;}
        if (minutes < 10) {minutes = minutes;}
        if (seconds < 10) {seconds = "0"+seconds;}
        return (hours > 0 ? hours+':' : '')+minutes+':'+seconds;
    }

    function overflow() {
        document.querySelectorAll('.trackTitleContainer *').forEach((el) => {
            el.classList.remove("overflow");
            setTimeout(() => {
                if (el.scrollWidth > el.parentElement.offsetWidth) {
                    el.classList.add("overflow");
                } else {
                    el.classList.remove("overflow");
                }
            }, 500)
        })
    }

    function loadPlayer() {
        let audio = document.querySelector('audio#player');

        document.querySelectorAll(".playlist .select").forEach((el) => {
            el.addEventListener("click", (e) => {
                audio.querySelector('source').src = '/music/' + el.dataset.value;
                audio.title = el.dataset.title;
                audio.load();
                audio.play();
                document.querySelector('[data-way="playpause"]').innerHTML = 'pause';
                document.querySelector('.np-container #trackTitle').textContent = el.dataset.title;
                document.querySelector('.np-container #trackArtist').textContent = el.dataset.artist;
                document.querySelector('.np-container #trackArt').src = `/music/art-${el.dataset.value.replace('.mp3', '.jpg')}`;
                document.querySelector('.np-container #trackArt').dataset.title = el.dataset.album;
                overflow();
                if ('mediaSession' in navigator) {
                    navigator.mediaSession.metadata = new MediaMetadata({
                        album: el.dataset.album,
                        artist: el.dataset.artist,
                        title: el.dataset.title,
                        artwork: [
                            { src: `/music/art-${el.dataset.value.replace('.mp3', '.jpg')}`, sizes: '720x720', type: 'image/jpg' },
                        ]
                    })
                }
                document.querySelectorAll(".playlist .select").forEach((el) => {
                    el.classList.remove("selected");
                });
                el.classList.add("selected");
            });
        });

        document.querySelector('input#prog').value = 0;
        document.querySelector('.playlist .select').classList.add('selected');

        if ('mediaSession' in navigator) {
            navigator.mediaSession.setActionHandler('nexttrack', () => changeAudio({ dataset: { way: 'next' } }))
            navigator.mediaSession.setActionHandler('previoustrack', () => changeAudio({ dataset: { way: 'prev' } }))
        }
    }

    function playPause(play) {
        if (play) {
            document.querySelector('[data-way="playpause"]').innerHTML = 'play_arrow';
        } else {
            document.querySelector('[data-way="playpause"]').innerHTML = 'pause';
        }
    }

    function changeAudio(el) {
        let audio = document.querySelector('audio#player');
        let tag = document.querySelector(`#player .select.selected`);
        let vals = document.querySelectorAll('.playlist .select');
        let prev = tag.dataset.prevtrack || vals[vals.length - 1].dataset.value;
        let next = tag.dataset.nexttrack || vals[0].dataset.value;
        let prevTag = document.querySelector(`[data-value="${prev}"]`);
        let nextTag = document.querySelector(`[data-value="${next}"]`);

        if (!el) {
            el = document.querySelector('[data-way="playpause"]');
        }
        switch (el.dataset.way) {
            case "playpause":
                if (el.innerHTML === 'play_arrow') {
                    audio.play();
                    el.innerHTML = 'pause';
                    if ('mediaSession' in navigator) {
                        navigator.mediaSession.metadata = new MediaMetadata({
                            album: tag.dataset.album,
                            artist: tag.dataset.artist,
                            title: tag.dataset.title,
                            artwork: [
                                { src: `/music/art-${tag.dataset.value.replace('.mp3', '.jpg')}`, sizes: '720x720', type: 'image/jpg' },
                            ]
                        })
                    }
                } else {
                    audio.pause();
                    el.innerHTML = 'play_arrow';
                }
                break;
            case "prev":
                if (audio.currentTime > 2) {
                    audio.currentTime = 0;
                    break;
                }
                audio.querySelector('source').src = '/music/' + prev;
                audio.load();
                document.querySelector('input#prog').value = 0;
                audio.play();
                document.querySelector('[data-way="playpause"]').innerHTML = 'pause';
                document.querySelector('.np-container #trackTitle').textContent = prevTag.dataset.title;
                document.querySelector('.np-container #trackArtist').textContent = prevTag.dataset.artist;
                document.querySelector('.np-container #trackArt').src = `/music/art-${prevTag.dataset.value.replace('.mp3', '.jpg')}`;
                document.querySelector('.np-container #trackArt').dataset.title = prevTag.dataset.album;
                overflow();
                if ('mediaSession' in navigator) {
                    navigator.mediaSession.metadata = new MediaMetadata({
                        album: prevTag.dataset.album,
                        artist: prevTag.dataset.artist,
                        title: prevTag.dataset.title,
                        artwork: [
                            { src: `/music/art-${prevTag.dataset.value.replace('.mp3', '.jpg')}`, sizes: '720x720', type: 'image/jpg' },
                        ]
                    })
                }
                document.querySelectorAll(".playlist .select").forEach((el) => {
                    el.classList.remove("selected");
                });
                prevTag.classList.add("selected");
                break;
            default:
                audio.querySelector('source').src = '/music/' + next;
                audio.load();
                document.querySelector('input#prog').value = 0;
                audio.play();
                document.querySelector('[data-way="playpause"]').innerHTML = 'pause';
                document.querySelector('.np-container #trackTitle').textContent = nextTag.dataset.title;
                document.querySelector('.np-container #trackArtist').textContent = nextTag.dataset.artist;
                document.querySelector('.np-container #trackArt').dataset.title = nextTag.dataset.album;
                document.querySelector('.np-container #trackArt').src = `/music/art-${nextTag.dataset.value.replace('.mp3', '.jpg')}`;
                overflow();
                if ('mediaSession' in navigator) {
                    navigator.mediaSession.metadata = new MediaMetadata({
                        album: nextTag.dataset.album,
                        artist: nextTag.dataset.artist,
                        title: nextTag.dataset.title,
                        artwork: [
                            { src: `/music/art-${nextTag.dataset.value.replace('.mp3', '.jpg')}`, sizes: '720x720', type: 'image/jpg' },
                        ]
                    })
                }
                document.querySelectorAll(".playlist .select").forEach((el) => {
                    el.classList.remove("selected");
                });
                nextTag.classList.add("selected");
                break;
        }
    }

    function timeUpdate(el) {
        document.querySelector('#pos').textContent = toHHMMSS(el.currentTime || 0);
        try {
            document.querySelector('#rem').textContent = "-" + toHHMMSS((el.duration || 0) - (el.currentTime || 0));
        } catch {}
        document.querySelector('input#prog').value = ((el.currentTime || 0) / (el.duration || 0)) * 100;
        if ('mediaSession' in navigator) {
            navigator.mediaSession.setPositionState({
                duration: Math.round(el.duration || 0),
                position: Math.round(el.currentTime || 0)
            })
        }
    }

    function progUpdate(el) {
        let audio = document.querySelector('audio#player');
        audio.currentTime = (el.value / 100) * audio.duration;
    }

    function clickDur(el) {
        if (el.id === 'dur') {
            el.id = 'rem'
        } else {
            let audio = document.querySelector('audio#player');
            el.id = 'dur'
            el.textContent = toHHMMSS(audio.duration || 0);
        }
    }
</script>

<div class="floating-window" id="player">
    <div class="floating-window-titlebar">
        <p>jPlayer</p>
        <p onclick="closeWindow(this)"><span class="ms">close</span></p>
    </div>
    <div class="floating-window-content">
        <div class="np-container">
            <div>
                <img id="trackArt" title={r(music[0].info?.album)} src=`/music/art-${music[0].name.replace('.mp3', '.jpg')}` />
            </div>
            <div class="trackContainer">
                <div>
                    <div class="trackTitleContainer">
                        <h2 id="trackTitle">{music[0].info?.title}</h2>
                    </div>
                    <div class="trackTitleContainer">
                        <p id="trackArtist">{music[0].info?.artist}</p>
                    </div>
                </div>
                <div class="rangeContainer">
                    <input type="range" id="prog" value="0" min="0" max="100" aria-label="Current progress of the music" oninput="progUpdate(this)" />
                </div>
                <div class="controlContainer">
                    <p class="controls">
                        <span class="ms" data-way="prev" onclick="changeAudio(this)">skip_previous</span>
                        <span class="ms" data-way="playpause" onclick="changeAudio(this)">play_arrow</span>
                        <span class="ms" data-way="next" onclick="changeAudio(this)">skip_next</span>        
                    </p>
                    <p class="controls">
                        <span id="pos">0:00</span>/<span id="dur" onclick="clickDur(this)">--:--</span>
                    </p>
                </div>
                <audio
                    id="player"
                    title={music[0].info?.title}
                    onended="changeAudio(this)"
                    onpause="playPause(true)"
                    onplay="playPause(false)"
                    ontimeupdate="timeUpdate(this)"
                    ondurationchange="document.querySelector('#dur').textContent = toHHMMSS(this.duration)"
                >
                    <source src={"/music/" + music[0].name} />
                </audio>
            </div>
        </div>
        <div class="select-container playlist">
            {
                music.map((val) => <div class="select"
                data-prevtrack={music[music.indexOf(val) - 1]?.name}
                data-nexttrack={music[music.indexOf(val) + 1]?.name}
                data-title={r(val.info?.title)}
                data-artist={r(val.info?.artist)}
                data-album={r(val.info?.album)}
                data-value={val.name}>{val.info?.title} by {val.info?.artist}</div>)
            }
        </div>
    </div>
</div>

<style>
    .playlist {
        grid-template-columns: repeat(1, minmax(6px, 1fr));
        gap:3px;
        max-height: 250px;
        overflow: auto;
    }

    .np-container {
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 6px;
        padding: 6px;
        background: var(--altbg);

        * {
            padding:0;
            margin: 0;
        }

        img {
            width: 96px;
        }
    }

    .np-container p span.ms {
        cursor: pointer;
        font-size: 1.5em;
        opacity: 0.75;

        &:hover {
            opacity: 1;
        }
    }

    .rangeContainer {
        height: 24px;
    }

    .trackContainer {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        width: 100%;
        overflow: hidden;

        input[type='range'] {
            width: 100%;
            -webkit-appearance: none;
            appearance: none;
            height: 6px;
            background: var(--text);
            outline: none;
            opacity: 0.75;

            &:hover {
                opacity: 1;
            }

            &::-webkit-slider-thumb {
                -webkit-appearance: none;
                appearance: none;
                height: 12px;
                width: 12px;
                background: var(--link);
                cursor: pointer;
            }

            &::-moz-range-thumb {
                height: 12px;
                width: 12px;
                background: var(--link);
                cursor: pointer;
            }
        }

        .trackTitleContainer {
            max-width: 300px;
            overflow: hidden;

            &:has(.overflow) {
                height: 34px;
                position: relative;
            }

            #trackTitle.overflow, #trackArtist.overflow {
                position:absolute;
                animation: mq 12s infinite linear;
                animation-delay: 1s;
            }

            * {
                white-space: nowrap;
                text-wrap-mode: nowrap;
            }
        }
    }

    @keyframes mq {
        0% {
            left: 0%;
        }
        50% {
            left: -200%;
        }
        50.01% {
            left: 100%;
        }
        75% {
            left: 0%;
        }
    }

    #rem, #dur {
        cursor: pointer;
    }

    .controlContainer {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .floating-window-content {
        display: flex;
        flex-direction: column;
        gap: 6px;
    }
</style>
