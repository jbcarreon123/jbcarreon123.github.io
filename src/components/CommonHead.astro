---
const { title, id, description } = Astro.props;
const { url, site } = Astro;
import { OgImage } from "astro-opengraph-image/components";
const ogImage = url
    .toString()
    .replace("/posts/", "/post-og/")
    .replace(/\/$/, "");
import { ClientRouter } from "astro:transitions";
---

<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link rel="icon" href="/favicon.ico" />
<meta name="generator" content={Astro.generator} />
<title>{title ? title : "jb's site"}</title>
<meta name="description" content={description} />
<meta
    name="theme-color"
    media="(prefers-color-scheme: light)"
    content="#00ffea"
/>
<meta
    name="theme-color"
    media="(prefers-color-scheme: dark)"
    content="#a4b6fd"
/>

<style>
    @font-face {
        font-family: Inter;
        src: url(/fonts/Inter-Variable.ttf);
        font-display: swap;
    }

    @font-face {
        font-family: Atkinson Hyperlegible;
        src: url(/fonts/Atkinson-Hyperlegible-Regular.woff2);
        font-display: swap;
    }

    @font-face {
        font-family: Commit Mono;
        src: url(/fonts/CommitMono-Variable.ttf);
        font-display: swap;
    }

    @font-face {
        font-family: OpenDyslexic;
        src: url(/fonts/OpenDyslexic-Regular.woff2);
        font-display: swap;
    }

    @font-face {
        font-family: "VCR OSD Mono";
        src: url(/fonts/VCR-OSD-Mono.ttf);
        font-display: swap;
    }

    @font-face {
        font-family: Material Symbols;
        src: url(/fonts/MaterialSymbols.woff2);
        font-display: block;
        font-variation-settings:
            "FILL" 1,
            "wght" 400,
            "GRAD" 0,
            "opsz" 24;
    }
</style>

<!-- Meta tags -->
<meta name="twitter:card" content="summary_large_image" />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:url" content={url} />
<meta
    property="og:type"
    content={url.pathname.includes("posts") ? "article" : "website"}
/>
<meta property="twitter:image" content={ogImage + ".png"} />

<!-- Alternate links -->
<link
    rel="alternate"
    type="application/rss+xml"
    title="jb's posts"
    href={new URL("feed.xml", Astro.site)}
/>
<link
    rel="alternate"
    type="application/atom+xml"
    title="jb's posts"
    href={new URL("feed.atom", Astro.site)}
/>
<link
    rel="alternate"
    type="application/json"
    title="jb's posts"
    href={new URL("feed.json", Astro.site)}
/>
<link rel="me" href="https://fosstodon.org/@jbcarreon123" />

<!-- Scripts and stuff -->
<!-- <ClientRouter /> -->

<script is:inline>
    let cLog = console.log;
    console.log = (message, ...params) => {
        if (typeof message === 'string' && message.includes('%c')) {
            msg = message;
            message = params[1] ?? ' ';
            let tg1 = params.shift();
            cLog(`%cjbsite4%c ${msg}`,
                "background: #0084ff; color: white; padding-inline: 4px; border-radius: 2px; font-family: monospace;",
                "background: initial; color: initial;",
                tg1,
                message,
                ...params
            )
        } else {
            cLog(`%cjbsite4`,
                "background: #0084ff; color: white; padding-inline: 4px; border-radius: 2px; font-family: monospace;",
                message,
                ...params
            )
        }
    }

    let cErr = console.error;
    console.error = (message, ...params) => {
        cErr(`%cjbsite4`,
            "background: #ff2424; color: white; padding-inline: 4px; border-radius: 2px; font-family: monospace;",
            message,
            ...params
        )
    }

    if ('serviceWorker' in navigator && window.location.href.includes('jbcarreon123')) {
        console.log('Registering service worker...');
        navigator.serviceWorker.register('/service-worker.js');
    }

    Array.prototype.sample = function () {
        return this[Math.floor(Math.random() * this.length)];
    };

    function load() {
        setTimeout(() => {
            let motd = document.querySelector(".motd");
            if (motd) {
                motd.textContent = [
                    "ctrl + c and ctrl + v are the most used shortcuts",
                    "hello, we're trying to reach you for your site's extended warranty",
                    "nekonekoweb",
                    "hmm",
                    "your resident helper",
                    "made in astro and bun",
                    "a person that stares on his text editor",
                ].sample();
            }
        }, 250);

        document
            .querySelectorAll(".page-title")
            .forEach((el) => (el.textContent = document.title));

        let v = window.scrollY;
        document.querySelector("#main")?.scrollIntoView();
        window.scroll(window.scrollX, v);
    }

    document.addEventListener("DOMContentLoaded", () => {
        const inIframe = window.self !== window.top;
        if (inIframe) {
            createNotif("You are visiting jb's site in an iframe!", "For full experience, I recommend you to visit my site on not an iframe.")
        }

        let el = document.querySelector("aside")?.dataset.activePage;
        document.querySelectorAll("nav a").forEach((e) => {
            if (e.id === el) {
                e.classList.add("active");
                if (e.parentNode.tagName.toLowerCase() === "details") {
                    e.parentElement.setAttribute("open", true);
                }
            } else {
                e.classList.remove("active");
            }
        });

        let headerMenu = document.querySelector("header a");
        if (headerMenu) headerMenu.addEventListener("click", (e) => {
            e.preventDefault();

            let sidebar = document.getElementById("sidebar");
            let main = document.getElementById("main");

            if (sidebar.classList.contains("visible")) {
                sidebar.classList.remove("visible");
                main.scrollIntoView();
            } else {
                sidebar.classList.add("visible");
                sidebar.scrollIntoView();
            }
        });

        if (window.matchMedia("(width <= 640px)").matches)
            setTimeout(
                () => document.querySelector("main")?.scrollIntoView(),
                50,
            );

        const asideElement = document.querySelector("aside");
        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        const asideRect = entry.boundingClientRect;
                        const rootRect = entry.rootBounds || {
                            width: window.innerWidth,
                        };

                        if (
                            asideRect.left >= rootRect.left &&
                            asideRect.right <= rootRect.right
                        ) {
                            sidebar.classList.add("visible");
                        } else {
                            sidebar.classList.remove("visible");
                        }
                    } else {
                        sidebar.classList.remove("visible");
                    }
                });
            },
            {
                root: null,
                rootMargin: "150px",
                threshold: 1,
            },
        );
        observer.observe(asideElement);
    });
    document.addEventListener("astro:after-swap", () => load());

    document.addEventListener("DOMContentLoaded", () => {
        console.log(
            "%cSTOP!",
            "color: red; font-size: 64px; font-weight: bold;",
        );
        console.log(
            "%cDo NOT paste anything here unless you understand exactly what it does!",
            "color: white; background-color: red; font-size: 24px; font-weight: bold; border-radius: 3px;",
        );
        console.log(
            "%cPasting something here that you don't know how it works, can lead to your Nekoweb cookie being stolen!",
            "color: orange; font-size: 18px; font-weight: bold",
        );
        console.log(
            "%cIf someone asked you to paste something here, they are likely trying to hijack your account!",
            "color: red; font-size: 18px; font-weight: bold; background-color: black; border-radius: 3px;",
        );
        console.log("\n\n");
        console.log(
            "%cüëç Only paste code from sources you fully trust and understand.",
            "color: green; font-size: 16px; font-weight: bold;",
        );
        console.log(
            "%cüîí Remember: Security is YOUR responsibility.",
            "color: yellow; font-size: 16px; font-weight: bold;",
        );
    });
</script>

<style is:inline id="customCSS"></style>